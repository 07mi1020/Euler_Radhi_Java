package problems;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class p44 {
	
	/*Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised;
 what is the value of D?*/
	
	public static Set<BigInteger> setPentagonalNumbers = new HashSet<BigInteger>();
	public static BigInteger minDiff = BigInteger.valueOf(1000000000);
	
	public static void main(String[] args) {
		long startTime = System.currentTimeMillis();
		
		for(BigInteger n = BigInteger.valueOf(1); n.compareTo(BigInteger
				.valueOf(10000)) == -1; n = n.add(BigInteger.valueOf(1))){
			setPentagonalNumbers.add(((n.multiply(BigInteger.valueOf(3))).subtract(BigInteger.valueOf(1))).multiply(n).divide(BigInteger.valueOf(2)));
		}
		Object[] objectArrayPentagonalNumbers = setPentagonalNumbers.toArray();
		BigInteger[] intArrayPentagonalNumbers = new BigInteger[objectArrayPentagonalNumbers.length];
		for (int i = 0; i < objectArrayPentagonalNumbers.length; i++) {
			BigInteger tmp = (BigInteger) objectArrayPentagonalNumbers[i];
			intArrayPentagonalNumbers[i] = tmp;
		}
		Arrays.sort(intArrayPentagonalNumbers);
		for (int i = 0; i < objectArrayPentagonalNumbers.length; i++) {
			System.out.println("Array element : "+intArrayPentagonalNumbers[i]);
		}
		//for (BigInteger a : intArrayPentagonalNumbers) {
		//for(BigInteger i = BigInteger.valueOf(0);i.compareTo(BigInteger.valueOf(intArrayPentagonalNumbers.length))==-1;i=i.add(BigInteger.valueOf(1))){
		for(int i=0;i<intArrayPentagonalNumbers.length;i++){
			BigInteger a = intArrayPentagonalNumbers[i];
			for(int j=i;j<intArrayPentagonalNumbers.length;j++){
//			for(BigInteger n = a; n.compareTo(BigInteger
//					.valueOf(objectArrayPentagonalNumbers.length)) == -1; n = n.add(BigInteger.valueOf(1))){
				BigInteger n = intArrayPentagonalNumbers[j];
				BigInteger temp = n.subtract(a).abs();
				if(setPentagonalNumbers.contains((Object)temp) && setPentagonalNumbers.contains((Object)n.add(a))){
					if(temp.compareTo(minDiff)==-1){
						System.out.println("Value of a : "+a);
						System.out.println("Value of n : "+n);
						minDiff = temp;
					}
				}
			}
		}
		
		System.out.println("Smallest difference of pentagonal numbers is " + minDiff);
		long endTime = System.currentTimeMillis();

		System.out.println("time taken: " + (endTime - startTime) / 1000 + "s");
	}

}
